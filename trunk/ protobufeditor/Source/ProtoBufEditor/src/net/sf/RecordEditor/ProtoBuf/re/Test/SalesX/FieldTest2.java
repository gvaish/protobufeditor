// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FieldTest2.proto

package net.sf.RecordEditor.ProtoBuf.re.Test.SalesX;

public final class FieldTest2 {
  private FieldTest2() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum SaleType
      implements com.google.protobuf.ProtocolMessageEnum {
    RETURN(0, -1),
    OTHER(1, 0),
    SALE(2, 1),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static SaleType valueOf(int value) {
      switch (value) {
        case -1: return RETURN;
        case 0: return OTHER;
        case 1: return SALE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SaleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SaleType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SaleType>() {
            public SaleType findValueByNumber(int number) {
              return SaleType.valueOf(number)
    ;        }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final SaleType[] VALUES = {
      RETURN, OTHER, SALE, 
    };
    public static SaleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    private final int index;
    private final int value;
    private SaleType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    static {
      net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.getDescriptor();
    }
    
    // @@protoc_insertion_point(enum_scope:net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.SaleType)
  }
  
  public static final class TestFields2 extends
      com.google.protobuf.GeneratedMessage {
    // Use TestFields2.newBuilder() to construct.
    private TestFields2() {
      initFields();
    }
    private TestFields2(boolean noInit) {}
    
    private static final TestFields2 defaultInstance;
    public static TestFields2 getDefaultInstance() {
      return defaultInstance;
    }
    
    public TestFields2 getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_fieldAccessorTable;
    }
    
    // repeated int32 f01 = 1;
    public static final int F01_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> f01_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getF01List() {
      return f01_;
    }
    public int getF01Count() { return f01_.size(); }
    public int getF01(int index) {
      return f01_.get(index);
    }
    
    // repeated sint32 f02 = 2;
    public static final int F02_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> f02_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getF02List() {
      return f02_;
    }
    public int getF02Count() { return f02_.size(); }
    public int getF02(int index) {
      return f02_.get(index);
    }
    
    // repeated sfixed32 f03 = 3;
    public static final int F03_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> f03_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getF03List() {
      return f03_;
    }
    public int getF03Count() { return f03_.size(); }
    public int getF03(int index) {
      return f03_.get(index);
    }
    
    // repeated uint32 f04 = 4;
    public static final int F04_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> f04_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getF04List() {
      return f04_;
    }
    public int getF04Count() { return f04_.size(); }
    public int getF04(int index) {
      return f04_.get(index);
    }
    
    // repeated fixed32 f05 = 5;
    public static final int F05_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> f05_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getF05List() {
      return f05_;
    }
    public int getF05Count() { return f05_.size(); }
    public int getF05(int index) {
      return f05_.get(index);
    }
    
    // repeated int64 f06 = 6;
    public static final int F06_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Long> f06_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Long> getF06List() {
      return f06_;
    }
    public int getF06Count() { return f06_.size(); }
    public long getF06(int index) {
      return f06_.get(index);
    }
    
    // repeated sint64 f07 = 7;
    public static final int F07_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Long> f07_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Long> getF07List() {
      return f07_;
    }
    public int getF07Count() { return f07_.size(); }
    public long getF07(int index) {
      return f07_.get(index);
    }
    
    // repeated sfixed64 f08 = 8;
    public static final int F08_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Long> f08_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Long> getF08List() {
      return f08_;
    }
    public int getF08Count() { return f08_.size(); }
    public long getF08(int index) {
      return f08_.get(index);
    }
    
    // repeated uint64 f09 = 9;
    public static final int F09_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Long> f09_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Long> getF09List() {
      return f09_;
    }
    public int getF09Count() { return f09_.size(); }
    public long getF09(int index) {
      return f09_.get(index);
    }
    
    // repeated fixed64 f10 = 10;
    public static final int F10_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Long> f10_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Long> getF10List() {
      return f10_;
    }
    public int getF10Count() { return f10_.size(); }
    public long getF10(int index) {
      return f10_.get(index);
    }
    
    // repeated float f11 = 11;
    public static final int F11_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Float> f11_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Float> getF11List() {
      return f11_;
    }
    public int getF11Count() { return f11_.size(); }
    public float getF11(int index) {
      return f11_.get(index);
    }
    
    // repeated double f12 = 12;
    public static final int F12_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Double> f12_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Double> getF12List() {
      return f12_;
    }
    public int getF12Count() { return f12_.size(); }
    public double getF12(int index) {
      return f12_.get(index);
    }
    
    // repeated bool f13 = 13;
    public static final int F13_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Boolean> f13_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Boolean> getF13List() {
      return f13_;
    }
    public int getF13Count() { return f13_.size(); }
    public boolean getF13(int index) {
      return f13_.get(index);
    }
    
    // repeated string f15 = 15;
    public static final int F15_FIELD_NUMBER = 15;
    private java.util.List<java.lang.String> f15_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getF15List() {
      return f15_;
    }
    public int getF15Count() { return f15_.size(); }
    public java.lang.String getF15(int index) {
      return f15_.get(index);
    }
    
    // repeated .net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.SaleType f17 = 17;
    public static final int F17_FIELD_NUMBER = 17;
    private java.util.List<net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType> f17_ =
      java.util.Collections.emptyList();
    public java.util.List<net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType> getF17List() {
      return f17_;
    }
    public int getF17Count() { return f17_.size(); }
    public net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType getF17(int index) {
      return f17_.get(index);
    }
    
    // repeated bytes f19 = 19;
    public static final int F19_FIELD_NUMBER = 19;
    private java.util.List<com.google.protobuf.ByteString> f19_ =
      java.util.Collections.emptyList();
    public java.util.List<com.google.protobuf.ByteString> getF19List() {
      return f19_;
    }
    public int getF19Count() { return f19_.size(); }
    public com.google.protobuf.ByteString getF19(int index) {
      return f19_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int element : getF01List()) {
        output.writeInt32(1, element);
      }
      for (int element : getF02List()) {
        output.writeSInt32(2, element);
      }
      for (int element : getF03List()) {
        output.writeSFixed32(3, element);
      }
      for (int element : getF04List()) {
        output.writeUInt32(4, element);
      }
      for (int element : getF05List()) {
        output.writeFixed32(5, element);
      }
      for (long element : getF06List()) {
        output.writeInt64(6, element);
      }
      for (long element : getF07List()) {
        output.writeSInt64(7, element);
      }
      for (long element : getF08List()) {
        output.writeSFixed64(8, element);
      }
      for (long element : getF09List()) {
        output.writeUInt64(9, element);
      }
      for (long element : getF10List()) {
        output.writeFixed64(10, element);
      }
      for (float element : getF11List()) {
        output.writeFloat(11, element);
      }
      for (double element : getF12List()) {
        output.writeDouble(12, element);
      }
      for (boolean element : getF13List()) {
        output.writeBool(13, element);
      }
      for (java.lang.String element : getF15List()) {
        output.writeString(15, element);
      }
      for (net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType element : getF17List()) {
        output.writeEnum(17, element.getNumber());
      }
      for (com.google.protobuf.ByteString element : getF19List()) {
        output.writeBytes(19, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        for (int element : getF01List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF01List().size();
      }
      {
        int dataSize = 0;
        for (int element : getF02List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF02List().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getF03List().size();
        size += dataSize;
        size += 1 * getF03List().size();
      }
      {
        int dataSize = 0;
        for (int element : getF04List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF04List().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getF05List().size();
        size += dataSize;
        size += 1 * getF05List().size();
      }
      {
        int dataSize = 0;
        for (long element : getF06List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF06List().size();
      }
      {
        int dataSize = 0;
        for (long element : getF07List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF07List().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getF08List().size();
        size += dataSize;
        size += 1 * getF08List().size();
      }
      {
        int dataSize = 0;
        for (long element : getF09List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF09List().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getF10List().size();
        size += dataSize;
        size += 1 * getF10List().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getF11List().size();
        size += dataSize;
        size += 1 * getF11List().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getF12List().size();
        size += dataSize;
        size += 1 * getF12List().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getF13List().size();
        size += dataSize;
        size += 1 * getF13List().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getF15List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getF15List().size();
      }
      {
        int dataSize = 0;
        for (net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType element : getF17List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(element.getNumber());
        }
        size += dataSize;
        size += 2 * getF17List().size();
      }
      {
        int dataSize = 0;
        for (com.google.protobuf.ByteString element : getF19List()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * getF19List().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 result;
      
      // Construct using net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2();
        return builder;
      }
      
      protected net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2.getDescriptor();
      }
      
      public net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 getDefaultInstanceForType() {
        return net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.f01_ != java.util.Collections.EMPTY_LIST) {
          result.f01_ =
            java.util.Collections.unmodifiableList(result.f01_);
        }
        if (result.f02_ != java.util.Collections.EMPTY_LIST) {
          result.f02_ =
            java.util.Collections.unmodifiableList(result.f02_);
        }
        if (result.f03_ != java.util.Collections.EMPTY_LIST) {
          result.f03_ =
            java.util.Collections.unmodifiableList(result.f03_);
        }
        if (result.f04_ != java.util.Collections.EMPTY_LIST) {
          result.f04_ =
            java.util.Collections.unmodifiableList(result.f04_);
        }
        if (result.f05_ != java.util.Collections.EMPTY_LIST) {
          result.f05_ =
            java.util.Collections.unmodifiableList(result.f05_);
        }
        if (result.f06_ != java.util.Collections.EMPTY_LIST) {
          result.f06_ =
            java.util.Collections.unmodifiableList(result.f06_);
        }
        if (result.f07_ != java.util.Collections.EMPTY_LIST) {
          result.f07_ =
            java.util.Collections.unmodifiableList(result.f07_);
        }
        if (result.f08_ != java.util.Collections.EMPTY_LIST) {
          result.f08_ =
            java.util.Collections.unmodifiableList(result.f08_);
        }
        if (result.f09_ != java.util.Collections.EMPTY_LIST) {
          result.f09_ =
            java.util.Collections.unmodifiableList(result.f09_);
        }
        if (result.f10_ != java.util.Collections.EMPTY_LIST) {
          result.f10_ =
            java.util.Collections.unmodifiableList(result.f10_);
        }
        if (result.f11_ != java.util.Collections.EMPTY_LIST) {
          result.f11_ =
            java.util.Collections.unmodifiableList(result.f11_);
        }
        if (result.f12_ != java.util.Collections.EMPTY_LIST) {
          result.f12_ =
            java.util.Collections.unmodifiableList(result.f12_);
        }
        if (result.f13_ != java.util.Collections.EMPTY_LIST) {
          result.f13_ =
            java.util.Collections.unmodifiableList(result.f13_);
        }
        if (result.f15_ != java.util.Collections.EMPTY_LIST) {
          result.f15_ =
            java.util.Collections.unmodifiableList(result.f15_);
        }
        if (result.f17_ != java.util.Collections.EMPTY_LIST) {
          result.f17_ =
            java.util.Collections.unmodifiableList(result.f17_);
        }
        if (result.f19_ != java.util.Collections.EMPTY_LIST) {
          result.f19_ =
            java.util.Collections.unmodifiableList(result.f19_);
        }
        net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2) {
          return mergeFrom((net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2 other) {
        if (other == net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2.getDefaultInstance()) return this;
        if (!other.f01_.isEmpty()) {
          if (result.f01_.isEmpty()) {
            result.f01_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.f01_.addAll(other.f01_);
        }
        if (!other.f02_.isEmpty()) {
          if (result.f02_.isEmpty()) {
            result.f02_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.f02_.addAll(other.f02_);
        }
        if (!other.f03_.isEmpty()) {
          if (result.f03_.isEmpty()) {
            result.f03_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.f03_.addAll(other.f03_);
        }
        if (!other.f04_.isEmpty()) {
          if (result.f04_.isEmpty()) {
            result.f04_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.f04_.addAll(other.f04_);
        }
        if (!other.f05_.isEmpty()) {
          if (result.f05_.isEmpty()) {
            result.f05_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.f05_.addAll(other.f05_);
        }
        if (!other.f06_.isEmpty()) {
          if (result.f06_.isEmpty()) {
            result.f06_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.f06_.addAll(other.f06_);
        }
        if (!other.f07_.isEmpty()) {
          if (result.f07_.isEmpty()) {
            result.f07_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.f07_.addAll(other.f07_);
        }
        if (!other.f08_.isEmpty()) {
          if (result.f08_.isEmpty()) {
            result.f08_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.f08_.addAll(other.f08_);
        }
        if (!other.f09_.isEmpty()) {
          if (result.f09_.isEmpty()) {
            result.f09_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.f09_.addAll(other.f09_);
        }
        if (!other.f10_.isEmpty()) {
          if (result.f10_.isEmpty()) {
            result.f10_ = new java.util.ArrayList<java.lang.Long>();
          }
          result.f10_.addAll(other.f10_);
        }
        if (!other.f11_.isEmpty()) {
          if (result.f11_.isEmpty()) {
            result.f11_ = new java.util.ArrayList<java.lang.Float>();
          }
          result.f11_.addAll(other.f11_);
        }
        if (!other.f12_.isEmpty()) {
          if (result.f12_.isEmpty()) {
            result.f12_ = new java.util.ArrayList<java.lang.Double>();
          }
          result.f12_.addAll(other.f12_);
        }
        if (!other.f13_.isEmpty()) {
          if (result.f13_.isEmpty()) {
            result.f13_ = new java.util.ArrayList<java.lang.Boolean>();
          }
          result.f13_.addAll(other.f13_);
        }
        if (!other.f15_.isEmpty()) {
          if (result.f15_.isEmpty()) {
            result.f15_ = new java.util.ArrayList<java.lang.String>();
          }
          result.f15_.addAll(other.f15_);
        }
        if (!other.f17_.isEmpty()) {
          if (result.f17_.isEmpty()) {
            result.f17_ = new java.util.ArrayList<net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType>();
          }
          result.f17_.addAll(other.f17_);
        }
        if (!other.f19_.isEmpty()) {
          if (result.f19_.isEmpty()) {
            result.f19_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
          }
          result.f19_.addAll(other.f19_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              addF01(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF01(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              addF02(input.readSInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF02(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 29: {
              addF03(input.readSFixed32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF03(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              addF04(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF04(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 45: {
              addF05(input.readFixed32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF05(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              addF06(input.readInt64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF06(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              addF07(input.readSInt64());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF07(input.readSInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 65: {
              addF08(input.readSFixed64());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF08(input.readSFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              addF09(input.readUInt64());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF09(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 81: {
              addF10(input.readFixed64());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF10(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 93: {
              addF11(input.readFloat());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF11(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 97: {
              addF12(input.readDouble());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF12(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              addF13(input.readBool());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addF13(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 122: {
              addF15(input.readString());
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType value = net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                addF17(value);
              }
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType value = net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(17, rawValue);
                } else {
                  addF17(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 154: {
              addF19(input.readBytes());
              break;
            }
          }
        }
      }
      
      
      // repeated int32 f01 = 1;
      public java.util.List<java.lang.Integer> getF01List() {
        return java.util.Collections.unmodifiableList(result.f01_);
      }
      public int getF01Count() {
        return result.getF01Count();
      }
      public int getF01(int index) {
        return result.getF01(index);
      }
      public Builder setF01(int index, int value) {
        result.f01_.set(index, value);
        return this;
      }
      public Builder addF01(int value) {
        if (result.f01_.isEmpty()) {
          result.f01_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.f01_.add(value);
        return this;
      }
      public Builder addAllF01(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.f01_.isEmpty()) {
          result.f01_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.f01_);
        return this;
      }
      public Builder clearF01() {
        result.f01_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sint32 f02 = 2;
      public java.util.List<java.lang.Integer> getF02List() {
        return java.util.Collections.unmodifiableList(result.f02_);
      }
      public int getF02Count() {
        return result.getF02Count();
      }
      public int getF02(int index) {
        return result.getF02(index);
      }
      public Builder setF02(int index, int value) {
        result.f02_.set(index, value);
        return this;
      }
      public Builder addF02(int value) {
        if (result.f02_.isEmpty()) {
          result.f02_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.f02_.add(value);
        return this;
      }
      public Builder addAllF02(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.f02_.isEmpty()) {
          result.f02_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.f02_);
        return this;
      }
      public Builder clearF02() {
        result.f02_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sfixed32 f03 = 3;
      public java.util.List<java.lang.Integer> getF03List() {
        return java.util.Collections.unmodifiableList(result.f03_);
      }
      public int getF03Count() {
        return result.getF03Count();
      }
      public int getF03(int index) {
        return result.getF03(index);
      }
      public Builder setF03(int index, int value) {
        result.f03_.set(index, value);
        return this;
      }
      public Builder addF03(int value) {
        if (result.f03_.isEmpty()) {
          result.f03_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.f03_.add(value);
        return this;
      }
      public Builder addAllF03(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.f03_.isEmpty()) {
          result.f03_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.f03_);
        return this;
      }
      public Builder clearF03() {
        result.f03_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated uint32 f04 = 4;
      public java.util.List<java.lang.Integer> getF04List() {
        return java.util.Collections.unmodifiableList(result.f04_);
      }
      public int getF04Count() {
        return result.getF04Count();
      }
      public int getF04(int index) {
        return result.getF04(index);
      }
      public Builder setF04(int index, int value) {
        result.f04_.set(index, value);
        return this;
      }
      public Builder addF04(int value) {
        if (result.f04_.isEmpty()) {
          result.f04_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.f04_.add(value);
        return this;
      }
      public Builder addAllF04(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.f04_.isEmpty()) {
          result.f04_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.f04_);
        return this;
      }
      public Builder clearF04() {
        result.f04_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated fixed32 f05 = 5;
      public java.util.List<java.lang.Integer> getF05List() {
        return java.util.Collections.unmodifiableList(result.f05_);
      }
      public int getF05Count() {
        return result.getF05Count();
      }
      public int getF05(int index) {
        return result.getF05(index);
      }
      public Builder setF05(int index, int value) {
        result.f05_.set(index, value);
        return this;
      }
      public Builder addF05(int value) {
        if (result.f05_.isEmpty()) {
          result.f05_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.f05_.add(value);
        return this;
      }
      public Builder addAllF05(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.f05_.isEmpty()) {
          result.f05_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.f05_);
        return this;
      }
      public Builder clearF05() {
        result.f05_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int64 f06 = 6;
      public java.util.List<java.lang.Long> getF06List() {
        return java.util.Collections.unmodifiableList(result.f06_);
      }
      public int getF06Count() {
        return result.getF06Count();
      }
      public long getF06(int index) {
        return result.getF06(index);
      }
      public Builder setF06(int index, long value) {
        result.f06_.set(index, value);
        return this;
      }
      public Builder addF06(long value) {
        if (result.f06_.isEmpty()) {
          result.f06_ = new java.util.ArrayList<java.lang.Long>();
        }
        result.f06_.add(value);
        return this;
      }
      public Builder addAllF06(
          java.lang.Iterable<? extends java.lang.Long> values) {
        if (result.f06_.isEmpty()) {
          result.f06_ = new java.util.ArrayList<java.lang.Long>();
        }
        super.addAll(values, result.f06_);
        return this;
      }
      public Builder clearF06() {
        result.f06_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sint64 f07 = 7;
      public java.util.List<java.lang.Long> getF07List() {
        return java.util.Collections.unmodifiableList(result.f07_);
      }
      public int getF07Count() {
        return result.getF07Count();
      }
      public long getF07(int index) {
        return result.getF07(index);
      }
      public Builder setF07(int index, long value) {
        result.f07_.set(index, value);
        return this;
      }
      public Builder addF07(long value) {
        if (result.f07_.isEmpty()) {
          result.f07_ = new java.util.ArrayList<java.lang.Long>();
        }
        result.f07_.add(value);
        return this;
      }
      public Builder addAllF07(
          java.lang.Iterable<? extends java.lang.Long> values) {
        if (result.f07_.isEmpty()) {
          result.f07_ = new java.util.ArrayList<java.lang.Long>();
        }
        super.addAll(values, result.f07_);
        return this;
      }
      public Builder clearF07() {
        result.f07_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sfixed64 f08 = 8;
      public java.util.List<java.lang.Long> getF08List() {
        return java.util.Collections.unmodifiableList(result.f08_);
      }
      public int getF08Count() {
        return result.getF08Count();
      }
      public long getF08(int index) {
        return result.getF08(index);
      }
      public Builder setF08(int index, long value) {
        result.f08_.set(index, value);
        return this;
      }
      public Builder addF08(long value) {
        if (result.f08_.isEmpty()) {
          result.f08_ = new java.util.ArrayList<java.lang.Long>();
        }
        result.f08_.add(value);
        return this;
      }
      public Builder addAllF08(
          java.lang.Iterable<? extends java.lang.Long> values) {
        if (result.f08_.isEmpty()) {
          result.f08_ = new java.util.ArrayList<java.lang.Long>();
        }
        super.addAll(values, result.f08_);
        return this;
      }
      public Builder clearF08() {
        result.f08_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated uint64 f09 = 9;
      public java.util.List<java.lang.Long> getF09List() {
        return java.util.Collections.unmodifiableList(result.f09_);
      }
      public int getF09Count() {
        return result.getF09Count();
      }
      public long getF09(int index) {
        return result.getF09(index);
      }
      public Builder setF09(int index, long value) {
        result.f09_.set(index, value);
        return this;
      }
      public Builder addF09(long value) {
        if (result.f09_.isEmpty()) {
          result.f09_ = new java.util.ArrayList<java.lang.Long>();
        }
        result.f09_.add(value);
        return this;
      }
      public Builder addAllF09(
          java.lang.Iterable<? extends java.lang.Long> values) {
        if (result.f09_.isEmpty()) {
          result.f09_ = new java.util.ArrayList<java.lang.Long>();
        }
        super.addAll(values, result.f09_);
        return this;
      }
      public Builder clearF09() {
        result.f09_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated fixed64 f10 = 10;
      public java.util.List<java.lang.Long> getF10List() {
        return java.util.Collections.unmodifiableList(result.f10_);
      }
      public int getF10Count() {
        return result.getF10Count();
      }
      public long getF10(int index) {
        return result.getF10(index);
      }
      public Builder setF10(int index, long value) {
        result.f10_.set(index, value);
        return this;
      }
      public Builder addF10(long value) {
        if (result.f10_.isEmpty()) {
          result.f10_ = new java.util.ArrayList<java.lang.Long>();
        }
        result.f10_.add(value);
        return this;
      }
      public Builder addAllF10(
          java.lang.Iterable<? extends java.lang.Long> values) {
        if (result.f10_.isEmpty()) {
          result.f10_ = new java.util.ArrayList<java.lang.Long>();
        }
        super.addAll(values, result.f10_);
        return this;
      }
      public Builder clearF10() {
        result.f10_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated float f11 = 11;
      public java.util.List<java.lang.Float> getF11List() {
        return java.util.Collections.unmodifiableList(result.f11_);
      }
      public int getF11Count() {
        return result.getF11Count();
      }
      public float getF11(int index) {
        return result.getF11(index);
      }
      public Builder setF11(int index, float value) {
        result.f11_.set(index, value);
        return this;
      }
      public Builder addF11(float value) {
        if (result.f11_.isEmpty()) {
          result.f11_ = new java.util.ArrayList<java.lang.Float>();
        }
        result.f11_.add(value);
        return this;
      }
      public Builder addAllF11(
          java.lang.Iterable<? extends java.lang.Float> values) {
        if (result.f11_.isEmpty()) {
          result.f11_ = new java.util.ArrayList<java.lang.Float>();
        }
        super.addAll(values, result.f11_);
        return this;
      }
      public Builder clearF11() {
        result.f11_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated double f12 = 12;
      public java.util.List<java.lang.Double> getF12List() {
        return java.util.Collections.unmodifiableList(result.f12_);
      }
      public int getF12Count() {
        return result.getF12Count();
      }
      public double getF12(int index) {
        return result.getF12(index);
      }
      public Builder setF12(int index, double value) {
        result.f12_.set(index, value);
        return this;
      }
      public Builder addF12(double value) {
        if (result.f12_.isEmpty()) {
          result.f12_ = new java.util.ArrayList<java.lang.Double>();
        }
        result.f12_.add(value);
        return this;
      }
      public Builder addAllF12(
          java.lang.Iterable<? extends java.lang.Double> values) {
        if (result.f12_.isEmpty()) {
          result.f12_ = new java.util.ArrayList<java.lang.Double>();
        }
        super.addAll(values, result.f12_);
        return this;
      }
      public Builder clearF12() {
        result.f12_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated bool f13 = 13;
      public java.util.List<java.lang.Boolean> getF13List() {
        return java.util.Collections.unmodifiableList(result.f13_);
      }
      public int getF13Count() {
        return result.getF13Count();
      }
      public boolean getF13(int index) {
        return result.getF13(index);
      }
      public Builder setF13(int index, boolean value) {
        result.f13_.set(index, value);
        return this;
      }
      public Builder addF13(boolean value) {
        if (result.f13_.isEmpty()) {
          result.f13_ = new java.util.ArrayList<java.lang.Boolean>();
        }
        result.f13_.add(value);
        return this;
      }
      public Builder addAllF13(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        if (result.f13_.isEmpty()) {
          result.f13_ = new java.util.ArrayList<java.lang.Boolean>();
        }
        super.addAll(values, result.f13_);
        return this;
      }
      public Builder clearF13() {
        result.f13_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string f15 = 15;
      public java.util.List<java.lang.String> getF15List() {
        return java.util.Collections.unmodifiableList(result.f15_);
      }
      public int getF15Count() {
        return result.getF15Count();
      }
      public java.lang.String getF15(int index) {
        return result.getF15(index);
      }
      public Builder setF15(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.f15_.set(index, value);
        return this;
      }
      public Builder addF15(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.f15_.isEmpty()) {
          result.f15_ = new java.util.ArrayList<java.lang.String>();
        }
        result.f15_.add(value);
        return this;
      }
      public Builder addAllF15(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.f15_.isEmpty()) {
          result.f15_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.f15_);
        return this;
      }
      public Builder clearF15() {
        result.f15_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.SaleType f17 = 17;
      public java.util.List<net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType> getF17List() {
        return java.util.Collections.unmodifiableList(result.f17_);
      }
      public int getF17Count() {
        return result.getF17Count();
      }
      public net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType getF17(int index) {
        return result.getF17(index);
      }
      public Builder setF17(int index, net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.f17_.set(index, value);
        return this;
      }
      public Builder addF17(net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.f17_.isEmpty()) {
          result.f17_ = new java.util.ArrayList<net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType>();
        }
        result.f17_.add(value);
        return this;
      }
      public Builder addAllF17(
          java.lang.Iterable<? extends net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType> values) {
        if (result.f17_.isEmpty()) {
          result.f17_ = new java.util.ArrayList<net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.SaleType>();
        }
        super.addAll(values, result.f17_);
        return this;
      }
      public Builder clearF17() {
        result.f17_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated bytes f19 = 19;
      public java.util.List<com.google.protobuf.ByteString> getF19List() {
        return java.util.Collections.unmodifiableList(result.f19_);
      }
      public int getF19Count() {
        return result.getF19Count();
      }
      public com.google.protobuf.ByteString getF19(int index) {
        return result.getF19(index);
      }
      public Builder setF19(int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.f19_.set(index, value);
        return this;
      }
      public Builder addF19(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.f19_.isEmpty()) {
          result.f19_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
        }
        result.f19_.add(value);
        return this;
      }
      public Builder addAllF19(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        if (result.f19_.isEmpty()) {
          result.f19_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
        }
        super.addAll(values, result.f19_);
        return this;
      }
      public Builder clearF19() {
        result.f19_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.TestFields2)
    }
    
    static {
      defaultInstance = new TestFields2(true);
      net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.TestFields2)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020FieldTest2.proto\022+net.sf.RecordEditor." +
      "ProtoBuf.re.Test.SalesX\"\224\002\n\013TestFields2\022" +
      "\013\n\003f01\030\001 \003(\005\022\013\n\003f02\030\002 \003(\021\022\013\n\003f03\030\003 \003(\017\022\013" +
      "\n\003f04\030\004 \003(\r\022\013\n\003f05\030\005 \003(\007\022\013\n\003f06\030\006 \003(\003\022\013\n" +
      "\003f07\030\007 \003(\022\022\013\n\003f08\030\010 \003(\020\022\013\n\003f09\030\t \003(\004\022\013\n\003" +
      "f10\030\n \003(\006\022\013\n\003f11\030\013 \003(\002\022\013\n\003f12\030\014 \003(\001\022\013\n\003f" +
      "13\030\r \003(\010\022\013\n\003f15\030\017 \003(\t\022B\n\003f17\030\021 \003(\01625.net" +
      ".sf.RecordEditor.ProtoBuf.re.Test.SalesX" +
      ".SaleType\022\013\n\003f19\030\023 \003(\014*4\n\010SaleType\022\023\n\006RE" +
      "TURN\020\377\377\377\377\377\377\377\377\377\001\022\t\n\005OTHER\020\000\022\010\n\004SALE\020\001B\002H\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_net_sf_RecordEditor_ProtoBuf_re_Test_SalesX_TestFields2_descriptor,
              new java.lang.String[] { "F01", "F02", "F03", "F04", "F05", "F06", "F07", "F08", "F09", "F10", "F11", "F12", "F13", "F15", "F17", "F19", },
              net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2.class,
              net.sf.RecordEditor.ProtoBuf.re.Test.SalesX.FieldTest2.TestFields2.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
